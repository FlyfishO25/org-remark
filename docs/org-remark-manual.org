#+title: Org-remark User Manual
#+author: Noboru Ota <me@nobiot.com>
#+macro: version 1.0.x
#+macro: modified 16 January 2022

#+language: en
#+export_file_name: org-remark.texi
#+texinfo_dir_category: Emacs
#+texinfo_dir_title: Org-remark: (org-remark)
#+texinfo_dir_desc: Highlight and annotate any text file
#+texinfo: @paragraphindent asis

#+options: toc:nil ':t

#+ATTR_TEXINFO: :tag CAUTION
#+begin_quote
This manual is still in a draft version and missing some key information relevant to the version being described.
#+end_quote

This manual is for Org-remark version {{{version}}}.

Last updated: {{{modified}}}.

Org-remark lets you highlight and annote any text file with using Org mode.

#+texinfo: @insertcopying

* COPYING
:PROPERTIES:
:COPYING: t
:END:

Copyright \copy 2021-2022  Free Software Foundation, Inc.

#+begin_quote
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being “A GNU Manual,” and
with the Back-Cover Texts as in (a) below.  A copy of the license is
included in the section entitled “GNU Free Documentation License.”

(a) The FSF’s Back-Cover Text is: “You have the freedom to copy and
modify this GNU manual.”
#+end_quote

* Installation
:PROPERTIES:
:TOC:      :depth 0
:END:

This package is not available on ELPA or MELPA yet. Manual installation is required.

Ensure to have Org Mode 9.4 or later (tested on 9.4.2). This package uses ~org-collect-keywords~, which does not exist in an earlier version.

Store both of the =.el= files in the repo in your load-path and put this in your
init file:

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/local-repos/org-remark/")
  (require 'org-remark-global-tracking)
  (require 'org-remark)
#+END_SRC

By loading =org-remark=, it will also pull in Org mode. You might like to defer loading of Org as it might take long time. As of version 0.0.6, you can do so with loading only =org-remark-global-tracking=, which does not load =org= automatically.

For example, I use this in my init file. 

#+begin_src emacs-lisp
  ;; Set `load-path' , load `org-remark-global-tracking', and turn it on for
  ;; automatic loading of highlights for the files tracked
  (add-to-list 'load-path "~/local-repos/org-remark")
  (require 'org-remark-global-tracking)
  (org-remark-global-tracking-mode +1)
#+end_src

Below are example keybindings you might like to consider:

#+begin_src emacs-lisp
  ;; Key-bind `org-remark-mark' to global-map so that you can call it globally
  ;; before the library is loaded.  In order to make `org-remark-mark' and
  ;; `org-remark-mode' callable, use `autoload'.
  (autoload #'org-remark-mark "org-remark" nil t)
  (autoload #'org-remark-mode "org-remark" nil t)
  (define-key global-map (kbd "C-c n m") #'org-remark-mark)

  ;; The rest of keybidings are done only on loading `org-remark'
  (with-eval-after-load 'org-remark
    (define-key org-remark-mode-map (kbd "C-c n o") #'org-remark-open)
    (define-key org-remark-mode-map (kbd "C-c n ]") #'org-remark-view-next)
    (define-key org-remark-mode-map (kbd "C-c n [") #'org-remark-view-prev)
    (define-key org-remark-mode-map (kbd "C-c n r") #'org-remark-remove))

#+end_src

* Getting Started
** Highlighting and Annotating

#+findex: org-remark-mark
#+findex: org-remark-open
#+findex: org-remark-view
#+cindex: Marginal notes file
#+cindex: Org-remark properties for highlights

To highlight a part of text, simply select one[fn:1] and call =M-x
org-remark-mark=. You will see the selected text gets highlighted. At the same time Org-remark will automatically create a *marginal notes file*. [[#customizing][By default]], it will be named =marginalia.org= and created in the same directory as the file you are editing.

To display the marginal notes for the highlight you have marked, place your cursor on the highlight and use =M-x org-remark-open= or =M-x org-remark-view=. [[#customizing][By default]], it will display a new buffer to the left of the current buffer you are editing. The =open= command takes the cursor to the marginal notes buffer to edit notes; whereas the =view= command keeps the cursor in the current buffer only to display the marginal notes. Both commands narrow the marginal notes file to the entry for the highlight under the cursor.  The marginal notes file is a normal Org file. Edit your notes just as you would do with any other Org files, and save the buffer.

You do not need to add any notes. In this case, the entry in marginal notes simply saves the location of the highlighted text. After you quit Emacs,  re-start it, and visit the same main file, Org-remark uses this information to highlight the text. You can also directly edit the marginal notes file as a normal Org file.

The important thing to note is that Org-remark uses following properties in the property drawer of the headline to remember the highlights:

- :org-remark-beg:
- :org-remark-end:
- :org-remark-id:
- :org-remark-label:

Essentially, the marginal notes file is a database in the plain text with using Org mode. As a plain text database, you can easily edit these properties manually if necessary.

[fn:1] Set a mark and activate a region in Emacs terminology.

** Automatically Load Highlights after Re-starting Emacs

#+findex: org-remark-global-tracking-mode
#+findex: org-remark-mode
#+vindex: org-remark-tracking-file

It is recommended that =org-remark-global-tracking-mode= be turned on as part of your Emacs initalization. This should be done before you start adding hightlights in any file. 

Once you have added highlights to some files, quit Emacs, and re-start it, active =org-remark-global-tracking-mode= will automatically turn on =org-remark-mode= and load the highlights from your previous sessions for the files being globally tracked.

When activated, =org-remark-global-tracking-mode= will also start remembering and tracking the files to which you add highlights and annotations. When you quit Emacs, it will save the tracked files in a file in your Emacs config directory (=user-emacs-directory=). [[#customizing][By default]], this file is named =.org-remark-tracking=.

Without this global minor mode, you would need to remember to activate =org-remark-mode= for each file where you add highlihgts and annotation. This is often unpractical. 

** Create Your Own Custom Highlighter Pen

#+vindex: org-remark-create-default-pen-set
#+findex: org-remark-mark
#+findex: org-remark-mark-yellow
#+findex: org-remark-mark-red-line
#+findex: org-remark-create

Org-remark has a default highlighter pen function, and comes with a set of two additional pens [[#customizing][by default]]:

- =org-remark-mark= : default highlighter pen
- =org-remark-mark-yellow=
- =org-remark-mark-red-line=

Org-remark lets you create your own custom pen functions with =org-remark-create=. See how "red-line" and "yellow" pens are created. They are meant to be a starter pack and examples. 

#+begin_src elisp
  (org-remark-create "red-line"
                     '(:underline (:color "dark red" :style wave))
                     '(CATEGORY "review" help-echo "Review this"))
  (org-remark-create "yellow"
                     '(:underline "gold" :background "lemon chiffon")
                     '(CATEGORY "important"))
#+end_src

#+ATTR_TEXINFO: :tag CAUTION
#+begin_quote
Don't use category (symbol) as a property -- it's a special one of text properties. If you use it, the value also need to be a symbol; otherwise, you will get an error. You can use CATEGORY (symbol and all uppercase), which will result in CATEGORY in the property drawer in marginal notes Org files.
#+end_quote


* Usage
:PROPERTIES:
:TOC:      :depth 0
:END:
** Commands

- =org-remark-global-tracking-mode= ::
A global minor mode to save and track files that have marginal notes.
When active, visiting a file being tracked automatically turns on =org-remark-mode=, which loads highlights previously saved in the remark file.

The files being tracked are saved in =org-remark-tracking-file=, which you can customize. The default file is named =.org-remark-tracking= in your Emacs configuration directory (=user-emacs-directory=).

- =org-remark-mode= ::
Org-remark is a local minor mode. Toggle it on/off with using =org-remark-mode=. On activating, it loads your saved highlights from the remark file (defined by =org-remark-notes-file-path=), and enables automatic saving of highlights. The automatic saving is achieved via function =org-remark-save= added to =after-save-hook=.

- =org-remark-mark= ::
Select a region of text, and call =org-remark-mark= to highlight the region. It will generate a new ID, and start tracking the location -- so you can edit text around the highlighted text. Do not cut, copy and paste as the highlight will disappear (you can immediately =undo= to recover the text region along the highlights). To create a new marginal note entry in the remark file, save the buffer.

- =org-remark-save= ::
By default, Org-remark automatically creates or updates corresponding entries in the remark file with location and text of highlights on saving the buffer. Nevertheless, you can manually call =org-remark-save= to do so (automatic process also call this command).

If user option =org-remark-use-org-id= is non-nil, Org-remark will
create a link back to the source note with using an Org-ID link instead of a
normal file link.

When a new remark file is created and =org-remark-use-org-id= is
non-nil, Org-remark will add an ID property to the file level. This is mainly to support Org-roam's backlink feature for remark files.

- =org-remark-open= ::
Move your cursor on the highlighted text, and call =org-remark-open= to open the relevant margin notes in a separate window. Your cursor will move to the remark buffer narrowed to the relevant margin notes entry. You can edit the remark buffer as a normal Org buffer. Once you have done editing, you may simply save and close the it (kill it or close the window) as per your normal workflow. Technically, the remark buffer is a cloned indirect buffer of the remark file. 

- =org-remark-load= ::
This command visits the remark file and loads the saved highlights onto the current buffer. If there is no margin notes for it, it will output a message in the echo. Highlights tracked locally by Org-remark cannot persist when you kill the buffer, or quit Emacs. When you re-launch Emacs, ensure to turn on =org-remark-mode= to load the highlights. Loading is automatically done when you activate the minor mode.

- =org-remark-remove= ::
This command removes the highlight at point. It will remove the highlight, and remove the properties from the remark, but will keep the headline and notes in tact.

You can pass a universal argument (=C-u= by default). If this is the case, the command additionally deletes the entire heading subtree, along with the notes you have written, for the highlight.

- =org-remark-next= ::
Move to the next highlight if any. If there is none below the cursor, and there is a highlight above, loop back to the top one.
If the point has moved to the next highlight, this function enables transient map with `set-transient-map'. You don't have to press the keybinding prefix again to move further to the next. That is, you can do a key sequence like this:

   =C-c n ] ] ] ]=

If you have the same prefix for `org-remark-prev', you can combine it in
the sequence like so:

  =C-c n ] ] [ [=
  This lets your cursor back to where you started (next next prev prev)

- =org-remark-prev= ::
Move to the previous highlight if any. If there is none above the cursor, and there is a highlight below, loop back to the bottom one. This function enables transient map. See =org-remark-next= for detail.

- =org-remark-toggle= ::
Toggle showing/hiding of highlighters in current buffer. It only affects the display of the highlighters. When hidden, highlights' locations are still kept tracked; thus, upon buffer-save the correct locations are still recorded in the remark file.

** Keybindings Examples

`Org-remark` only provides its mode map, and does not bind any keys to it. As an example, you could do something like this below.

#+begin_src emacs-lisp
(define-key org-remark-mode-map (kbd "C-c n o") #'org-remark-open)
(define-key org-remark-mode-map (kbd "C-c m") #'org-remark-mark)
(define-key org-remark-mode-map (kbd "C-c n ]") #'org-remark-next)
(define-key org-remark-mode-map (kbd "C-c n [") #'org-remark-prev)
#+end_src

** Composing Personal Workflow

Currently only "elementary" functions are defined in the package; for example,  =mark= , =save=, and =open= are all separate functions. You can string these together to compose a more fluid operation to suite your own workflow. A very useful set of such chained commands have been suggesetd by holtzermann17 in [[https://org-roam.discourse.group/t/prototype-org-remark-write-margin-notes-with-org-mode/1080/10][Org-roam's Discourse discussion]] (adjusted to reflect the change of the prefix from =om/= to =org-remark-=) .

I will try to incorporate these into the package when I have more time to focus on it -- I find them useful, but there are some plans I have had, and want to think of how I can incoprate these suggestions better with my ideas. 

#+begin_src emacs-lisp
  (defun org-remark-make-annotation ()
    (interactive)
    (let ((mark-end (region-end)))
      (org-remark-mark (region-beginning) (region-end))
      (org-remark-save)
      (org-remark-open (1- mark-end))
      (end-of-buffer)))

  (define-key org-remark-mode-map (kbd "C-c M")
    #'org-remark-make-annotation)

  (defun org-remark-browse-forward ()
    (interactive)
    (let ((buf (current-buffer)))
      (org-remark-next) (org-remark-open (point))
      (pop-to-buffer buf nil t)))

  (define-key org-remark-mode-map (kbd "C-c n }")
    #'org-remark-browse-forward)

  (defun org-remark-browse-backward ()
    (interactive)
    (let ((buf (current-buffer)))
      (org-remark-prev) (org-remark-open (point))
      (pop-to-buffer buf nil t)))

  (define-key org-remark-mode-map (kbd "C-c n {")
    #'org-remark-browse-backward)
#+end_src

* Customizing
:PROPERTIES:
:CUSTOM_ID: customizing
:END:

- You can customize settings in the =org-remark= group.
- Highlight's face can be changed via =org-remark-highlighter=
- Remark file is defined by =org-remark-notes-file-path=
- Your files with marginal notes are saved and tracked in
  =org-remark-tracking-file= (when tracking is turned on via the global
  minor mode =org-remark-global-tracking-mode=)
- You can use Org-ID to create links from marginal notes back to their main
  notes when =org-remark-use-org-id= is on (default is on). This option also enables Org-remark to add an ID property when a new remark file is being created. This is to support seamless workflow with [[https://orgroam.com][Org-roam]].

* Known Limitations

- Copy & pasting loses highlights :: Overlays are not part of the kill; thus cannot be yanked.
  
- Undo highlight does not undo it :: Overlays are not part of the undo list; you cannot undo highlighting. Use =org-remark-remove= command instead.
  
- Moving source files and remark file :: Move your files and remark file to another directory does not update the source path recorded in the remark file. It will be confusing. Try not to do this.

* Credits

To create this package, I was inspired by the following packages. I did not copy any part of them, but borrowed some ideas from them -- e.g. saving the margin notes in a separate file.

- [[https://github.com/jkitchin/ov-highlight][Ov-highlight]] :: John Kitchin's (author of Org-ref). Great UX for markers with hydra. Saves the marker info and comments directly within the Org file as Base64 encoded string. It uses overlays with using `ov` package.
  
- [[https://github.com/bastibe/annotate.el][Annotate.el]] :: Bastian Bechtold's (author of Org-journal). Unique display of annotations right next to (or on top of) the text. It seems to be designed for very short annotations, and perhaps for code review (programming practice); I have seen recent issues reported when used with variable-pitch fonts (prose).
  
- [[https://github.com/tkf/org-mode/blob/master/contrib/lisp/org-annotate-file.el][Org-annotate-file]] :: Part of Org's contrib library. It seems to be designed to annotate a whole file in a separate Org file, rather than specific text items.
  
- [[https://github.com/IdoMagal/ipa.el][InPlaceAnnotations (ipa-mode)]] :: It looks similar to Annotate.el above.
  
- Transient navigation feature :: To implement the transient navigation feature, I liberally copied the relevant code from a wonderful Emacs package, [[https://github.com/rnkn/binder/blob/24d55db236fea2b405d4bdc69b4c33d0f066059c/binder.el#L658-L665][Binder]] by Paul W. Rankin (GitHub user [[https://github.com/rnkn][rnkn]]). 

* Feedback

Feedback welcome in this repo, or in [[https://org-roam.discourse.group/t/prototype-org-marginalia-write-margin-notes-with-org-mode/1080][Org-roam Discourse forum]]. 

* Contributing

To be added

* Index - Features
:PROPERTIES:
:CUSTOM_ID: cindex
:APPENDIX: t
:INDEX:    cp
:DESCRIPTION: Key concepts & features
:END:

* Index - Commands
:PROPERTIES:
:APPENDIX: t
:INDEX:    fn
:DESCRIPTION: Interactive functions
:END:

* Index - User Options
:PROPERTIES:
:APPENDIX: t
:INDEX:    vr
:DESCRIPTION: Customizable variables & faces
:END:

* GNU Free Documentation License
:PROPERTIES:
:appendix: t
:END:

#+texinfo: @include fdl.texi

# Local Variables:
# time-stamp-start: "modified +\\\\?"
# End:
